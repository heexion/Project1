//#include <iostream>
//using namespace std;
//#define SQUARE(x) ((x)*(x))
//#define 매크로 함수명(매개변수) 실행할 기능
//매크로 함수는 해당 위치에 값을 치환하는 느낌으로 사용되기에 괄호를 제대로 넣어줘야 원하는 결과를 얻을 수 있습니다.
//ex) SQUARE(5)=25
//
//#define COMBINE(x,y) #x "+" #y
//매개변수 계산 식에 #이 들어가는 경우 문자열입니다.
//ex) COMBINE("Banana","Milk") -> BananaMilk
//
//#define CONCAT(x,y,z) x ## y ## z
//매크로 함수에서 ##(토큰 결합자)를 사용 시 인자들을 이어붙이는 것이 가능합니다.
//ex) CONCAT(1,2,3) -> 123
//
//C++ 함수
//1. 반복되는 작업을 쉽게 처리하기 위한 용도로 만듭니다.
//2. 함수 설계를 통해 프로그램 내에서 어떤 작업을 하는지에 대한 이해가 쉬워집니다.
//
//함수의 설계 형태
//함수의 리턴 타입 함수의 이름(함수의 매개변수)
//{
//	함수에서 실행할 명령문;
//	return 리턴 값;
//}
//
//매개변수(parameter) : 함수를 호출할 때 넣어줄 값에 대한 표현을 진행하는 변수입니다.
//return : 함수를 종료하는 기능을 가진 제어문 키워드입니다. 
//함수의 타입이 void가 아닌 상태에서 return 다음에 값이 적혀있을 경우 함수를 호출한 위치에 그 값을 전달하는 기능도 가지고 있습니다. 
//매개변수는 지역변수와 마찬가지로 함수가 종료되면 메모리 상에서 제거됩니다.
// 
//함수의 이름 : 함수의 메모리 주소와 동일합니다.
//int Add(int a, int b)
//{
//	return a + b;
//}
//
//일반 함수
//함수의 리턴 타입이 void로 설계된 함수를 의미하고, 별도의 return 값을 가지지 않습니다
//void Print(string message)
//{
//	cout << message << endl;
//}
//함수 오버로딩 (Function Overloading)
//C++에서는 함수의 이름이 같아도 파라미터의 개수, 파라미터의 순서가 다를 경우 다른 값으로 인정합니다.
//이는 기존의 C언어처럼 함수마다 따로 이름을 부여하지 않고, 같은 이름의 다른 기능을 가지 함수 설계가 가능해 더 수월하게 코드를 작업할 수 있습니다.
//void Print(int value)
//{
//	cout << value << endl;
//}
//
//인라인 함수
//함수의 내용을 호출을 통해서 실행시키는 것이 기존의 함수라면, 인라인 함수는 호출하는 코드 자체가
//함수 내용의 코드로 작동하는 함수를 의미합니다.
//인라인을 통해 함수를 호출하는데 걸리는 시간을 절약해 빠른 속도로 작업이 가능합니다.
//대신 메모리의 낭비가 매우 심한 방식이기에 부담이 되는 방식입니다.
//
//일반 함수와 인라인 함수의 차이점
//프로그램 실행 속도 인라인 함수 > 일반 함수 
//이유 : 함수 종료 후 반환될 위치를 알려줘야 하기에
//현재 명령어의 주소도 저장해야하고, 호출 진행 시 해당 주소로 이동  -> 처리 종료 -> 원래 위치 이동
//의 과정에서 시간이 소모됨. (인라인의 경우는 함수 코드 자체가 직접 들어가 해당 과정이 생략됩니다.)
//
//메모리 사용 측면 
//일반 함수 >>> 인라인 함수
//호출마다 함수의 사본을 계속 삽입해줘야하는 방식이기에 메모리의 낭비가 발생할 수 있습니다.
//따라서 인라인의 설계는 호출이 그렇게 많이 일어나지 않는 함수 또는 내부 코드 양의 실행 속도는 짧은데
//호출 시간이 부담스러운 경우에 고려됩니다.
//
//inline int Sub(int x, int y)
//{
//	return x - y;
//}
//
//
//int main()
//{
//	Print("오늘은 토요일입니다.");
//
//	int result = Add(10, 5); //10+5의 결과가 Add(10,5) 함수가 종료되고 해당 위치로 전달됩니다.
//	Print(result);
//
//	Print(SQUARE(5));
//	Print(COMBINE("Banana", "Milk"));
//	Print(CONCAT(1, 2, 3));
//
//	return 0;
//}